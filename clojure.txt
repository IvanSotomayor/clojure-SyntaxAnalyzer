;; This program displays Hello World 
(defn Example [] 
   (println "Hello World")) 
 
; Comments start with semicolons. 
 
; The clojure reader assumes that the first thing is a 
; function or macro to call, and the rest are arguments. 
 
; More basic examples: 
; Math is straightforward 
(+ 1 1) ; => 2 
(- 2 1) ; => 1 
(* 1 2) ; => 2 
(/ 2 1) ; => 2 
 
; Equality is = 
(= 1 1) ; => true 
(= 2 1) ; => false 
 
; You need not for logic, too 
(not true ) ; => false 
 
; Nesting forms works as you expect 
(+ 1 (- 333333 2)) ; = 1 + (3 - 2) => 2 
 
; Types 
;;;;;;;;;;;;; 
 
; Clojure uses Java's object types for booleans, strings and numbers. 
 
; If you want to create a literal list of data, use ' to stop it from 
; being evaluated 
'(+ 1 2) ; => (+ 1 2) 
; (shorthand for (quote (+ 1 2))) 
 
; You can eval a quoted list 
(eval '(+ 1 2)) ; => 3 
 
; Collections & Sequences 
;;;;;;;;;;;;;;;;;;; 
 
; Lists are linked-list data structures, while Vectors are array-backed. 
 
; A list would be written as just (1 2 3), but we have to quote 
; it to stop the reader thinking it's a function. 
; Also, (list 1 2 3) is the same as '(1 2 3) 
 
; "Collections" are just groups of data 
; Both lists and vectors are collections: 
(coll? '(1 2 3)) ; => true 
(coll? [1 2 3]) ; => true 
 
; "Sequences" (seqs) are abstract descriptions of lists of data. 
; Only lists are seqs. 
(seq? '(1 2 3)) ; => true 
(seq? [1 2 3]) ; => false 
 
; A seq need only provide an entry when it is accessed. 
; So, seqs which can be lazy -- they can define infinite series: 
(range 4) ; => (0 1 2 3) 
(range) ; => (0 1 2 3 4 ...) (an infinite series) 
(take 4 (range )) ;  (0 1 2 3) 
 
; Use cons to add an item to the beginning of a list or vector 
(cons 4 [1 2 3]) ; => (4 1 2 3) 
(cons 4 '(1 2 3)) ; => (4 1 2 3) 
 
; Conj will add an item to a collection in the most efficient way. 
; For lists, they insert at the beginning. For vectors, they insert at the end. 
(conj [1 2 3] 4) ; => [1 2 3 4] 
(conj '(1 2 3) 4) ; => (4 1 2 3) 
 
; Use concat to add lists or vectors together 
(concat [1 2] '(3 4)) ; => (1 2 3 4) 
 
; Use filter, map to interact with collections 
(map inc [1 2 3]) ; => (2 3 4) 
(filter even? [1 2 3]) ; => (2) 
 
; Use reduce to reduce them 
(reduce + [1 2 3 4]) 
; = (+ (+ (+ 1 2) 3) 4) 
; => 10 
 
; Reduce can take an initial-value argument too 
(reduce conj [] '(3 2 1)) 
; = (conj (conj (conj [] 3) 2) 1) 
; => [3 2 1] 
 
; Functions 
;;;;;;;;;;;;;;;;;;;;; 
 
; Use fn to create new functions. A function always returns 
; its last statement. 
(fn [] "Hello World") ; => fn 
 
; (You need extra parens to call it) 
((fn [] "Hello World")) ; => "Hello World" 
 
; You can create a var using def 
(def x 1) 
x ; => 1 
 
; Assign a function to a var 
(def hello-world (fn [] "Hello World")) 
(hello-world) ; => "Hello World" 
 
; You can shorten this process by using defn 
(defn hello-world [] "Hello World") 
 
; The [] is the list of arguments for the function. 
(defn hello [name ] 
  (str "Hello " name )) 
(hello "Steve") ; => "Hello Steve" 
 
; You can also use this shorthand to create functions: 
(def hello2 #(str "Hello " %1)) 
(hello2 "Julie") ; => "Hello Julie" 
 
 
; Useful forms 
;;;;;;;;;;;;;;;;; 
 
; Logic constructs in clojure are just macros, and look like 
; everything else 
(if false "a" "b") ; => "b" 
(if false "a") ; => nil 
 
; Use let to create temporary bindings 
(let [a 1 b 2] 
  (> a b)) ; => false 
 
; Group statements together with do 
(do 
  (print "Hello") 
  "World") ; => "World" (prints "Hello") 
 
; Functions have an implicit do 
(defn print-and-say-hello [name ] 
  (print "Saying hello to " name ) 
  (str "Hello " name )) 
(print-and-say-hello "Jeff") ;=> "Hello Jeff" (prints "Saying hello to Jeff") 
 
 
; Tomado de https://learnxinyminutes.com/docs/clojure/

variable123

 
